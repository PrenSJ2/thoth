name: Release Extension

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to create releases, tags, and push commits

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version from manifest
        id: current_version
        run: |
          CURRENT_VERSION=$(grep -o '"version"[^"]*"[^"]*"' manifest.json | grep -o '[0-9.]*')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current manifest version: $CURRENT_VERSION"

      - name: Get latest release tag
        id: latest_tag
        run: |
          if git describe --tags --abbrev=0 2>/dev/null; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
            LATEST_VERSION=${LATEST_TAG#v}
            echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "Latest release version: $LATEST_VERSION"
          else
            echo "LATEST_VERSION=0.0.0" >> $GITHUB_OUTPUT
            echo "No previous releases found"
          fi

      - name: Increment version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.CURRENT_VERSION }}"
          LATEST="${{ steps.latest_tag.outputs.LATEST_VERSION }}"

          # Parse version numbers
          IFS='.' read -r -a current_parts <<< "$CURRENT"
          IFS='.' read -r -a latest_parts <<< "$LATEST"

          major="${current_parts[0]}"
          minor="${current_parts[1]}"
          patch="${current_parts[2]}"

          latest_major="${latest_parts[0]}"
          latest_minor="${latest_parts[1]}"
          latest_patch="${latest_parts[2]}"

          # If manifest version is greater than latest tag, use manifest version
          if [ "$major" -gt "$latest_major" ] || \
             ([ "$major" -eq "$latest_major" ] && [ "$minor" -gt "$latest_minor" ]) || \
             ([ "$major" -eq "$latest_major" ] && [ "$minor" -eq "$latest_minor" ] && [ "$patch" -gt "$latest_patch" ]); then
            NEW_VERSION="$CURRENT"
            echo "Using manifest version (already incremented manually)"
          else
            # Auto-increment patch version
            new_patch=$((latest_patch + 1))
            NEW_VERSION="${latest_major}.${latest_minor}.${new_patch}"
            echo "Auto-incrementing to: $NEW_VERSION"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update manifest.json with new version
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          # Update version in manifest.json (Linux sed syntax)
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEW_VERSION\"/" manifest.json
          echo "‚úì Updated manifest.json to version $NEW_VERSION"
          cat manifest.json | grep version

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add manifest.json
          git commit -m "Bump version to ${{ steps.new_version.outputs.NEW_VERSION }}" || echo "No changes to commit"
          git push origin main || echo "Nothing to push"

      - name: Package extension
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"

          # Create dist directory
          mkdir -p dist

          # Package the extension (Chrome Web Store only needs runtime files + legal docs)
          zip -q "dist/thoth-extension-v${NEW_VERSION}.zip" \
            manifest.json \
            background.js \
            content.js \
            popup.html \
            popup.js \
            icon.png \
            PRIVACY_POLICY.md \
            TERMS_OF_SERVICE.md \
            LICENSE \
            -x "*.thoth-images/*" -x ".thoth-images/*"

          # Show package info
          echo "Package created:"
          ls -lh dist/

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag (excluding the version bump commit we just made)
          if git describe --tags --abbrev=0 2>/dev/null; then
            PREV_TAG=$(git describe --tags --abbrev=0)
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            git log ${PREV_TAG}..HEAD~1 --pretty=format:"- %s (%h)" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
          fi

      - name: Create git tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${NEW_VERSION}" -m "Release v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.new_version.outputs.NEW_VERSION }}
          name: Thoth v${{ steps.new_version.outputs.NEW_VERSION }}
          body: |
            ## üìú Thoth Chrome Extension v${{ steps.new_version.outputs.NEW_VERSION }}

            **The AI scribe that records what matters.**

            ### üì• Installation

            1. Download `thoth-extension-v${{ steps.new_version.outputs.NEW_VERSION }}.zip` below
            2. Extract the zip file
            3. Open Chrome and go to `chrome://extensions/`
            4. Enable "Developer mode"
            5. Click "Load unpacked" and select the extracted folder
            6. Configure your API keys in the extension popup

            ### üìã Prerequisites

            - OpenAI API Key ([Get one here](https://platform.openai.com/api-keys))
            - GitHub Personal Access Token with `repo` and `read:org` scopes ([Generate here](https://github.com/settings/tokens/new?description=Thoth%20Chrome%20Extension&scopes=repo,read:org))

            ### üìù Changes

            ${{ steps.changelog.outputs.CHANGELOG }}

            ---

            **Full documentation:** [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
          files: |
            dist/thoth-extension-v${{ steps.new_version.outputs.NEW_VERSION }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Note: Chrome Web Store upload moved to separate workflow
      # Run 'Upload to Chrome Web Store' workflow manually if upload fails
      # or is in pending review state

      - name: Release complete
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.NEW_VERSION }}"
          echo "‚úì Release v${NEW_VERSION} published successfully!"
          echo "üì¶ GitHub release: https://github.com/${{ github.repository }}/releases/tag/v${NEW_VERSION}"
          echo ""
          echo "üì§ Chrome Web Store upload will run automatically via separate workflow"
          echo "   Or manually trigger: Actions ‚Üí Upload to Chrome Web Store ‚Üí Run workflow"
